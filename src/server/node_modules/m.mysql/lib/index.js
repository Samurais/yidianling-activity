
const mysql = require('mysql');
const qs = require('querystring');
const util = require('./util');
const config = require('../config');

module.exports = {

  init(){
    // 创建数据库
    this.createDatabase(config.databaseName);
  },

  pool: mysql.createPool(Config.mysqlConfig),

  connection() {

    return new Promise((resolve, reject) => {

      this.pool.getConnection((err, connection) => {

        if(!!!err) {
          resolve(connection);

        } else {
          log.info(`链接数据库失败，err： ${err}`);
          resolve(null);
        }
      });
    });
  },

  // 数据库配置
  async doMysql(sql, callback){

    let connection = await this.connection();

    if(!!!connection) {
      console.log("connection error");
      return;
    }

    connection.query(sql, (err, rows) => {
      callback.call(connection, err, rows);
      connection.release();
    });
  },

  // 创建数据库
  createDatabase(databaseName) {

    let sql = `Create Database If Not Exists ${databaseName} Character Set UTF8`;

    this.doMysql(sql, function(err, rows){
      if(!!err) {
        log.error(`数据库 ${databaseName} 创建失败 error: ${err}`);
      }
    });
  },

  // 选择数据库
  useDatabase(databaseName, callback) {

    let sqlUse = `use ${databaseName}`;

    this.doMysql(sqlUse, function(err, rows) {
      if(!!err) {
        log.error(`切换数据库 ${databaseName} 失败 error: ${err}`);
        return;
      }

      callback.call(this, rows);
    });
  },

  // 创建表
  createTable(data){

    this.useDatabase(data.databaseName, function(rows) {

      let sqlTable = `
        CREATE TABLE IF NOT EXISTS ${data.tableName}(
          ${util.createTableData(data.tableName)}
        )ENGINE=InnoDB DEFAULT CHARSET=utf8;
      `;

      // 如果切换数据库成功
      this.query(sqlTable, function(err, rows){

        if(!!err) {
          console.log(err)
          log.error(`数据库 ${data.databaseName} 创建表 ${data.tableName} 失败 error: ${err}`);

        } else {
          console.log(`数据库 ${data.databaseName} 创建表 ${data.tableName} 成功`)
          log.info(`数据库 ${data.databaseName} 创建表 ${data.tableName} 成功`);
        }
      });
    });

  },

  // 插入表字段
  alterAddTable(data) {

    if(!!!data.data || data.data.length == 0) {
      log.error(`插入表字段，参数错误。data应该为数组。`);
      console.log("插入表字段，参数错误。");
      return;
    }

    this.useDatabase(data.databaseName, function(rows) {
      let sqlAdd = `${util.alterAddTable(data)}`;

      this.query(sqlAdd, function(err, rows) {

        if(!!err) {
          log.error(`插入字段失败，请检查是否已经存在该字段。 error: ${err}`);
          console.log("插入字段失败，请检查是否已经存在该字段。");
        }
      });
    });
  },

  // 插入表数据
  insertTableData(data) {

    if(!!!data.data || data.length == 0) {
      log.error(`插入表数据，参数错误。data应该为数组。`);
      console.log("插入表数据，参数错误。data应该为数组。");
      return;
    }

    this.useDatabase(data.databaseName, function(rows) {
      let sqlAdd = `${util.insertTableData(this, data)}`;

      this.query(sqlAdd, function(err, rows) {

        if(!!err) {
          log.error(`插入数据失败。 error: ${err}`);
          console.log(err)
          console.log("插入数据失败，请检查");
        }
      });
    });
  },

  /**
   *
   * @param {databaseName, tableName, where, data} data
   * {
   *  databaseName: 数据库名 (必填)
   *  tableName: 数据库表名 (必填)
   *  where: 搜索条件 (必填)
   *  data: 更新数据 (必填)
   * }
   * @param {*} callback
   */
  updateTableData(data, callback) {

    this.useDatabase(data.databaseName, function(rows) {

      let sqlUpdate = util.updateTableData(this, data);

      this.query(sqlUpdate, function(err, rows) {

        if(!!err) {
          log.error(`更新数据失败。 error: ${err}`);
          console.log(err)
          console.log("更新数据失败，请检查");
        }

        typeof callback === "function" && callback(rows, err);

      });
    });
  },

  // 查找表
  selectTableData(data, callback) {

    this.useDatabase(data.databaseName, function(rows) {

      let sqlSelect = util.selectTableData(this, data);

      this.query(sqlSelect, function(err, rows) {

        if(!!err) {
          log.error(`获取数据失败。 error: ${err}`);
          console.log(err)
          console.log("获取数据失败，请检查");
        }

        typeof callback === "function" && callback(rows, err);

      });

    });
  },

}
